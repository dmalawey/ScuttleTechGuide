{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#about","title":"About","text":"<p>Welcome to ScuttleTechGuide! An open door to building and developing with the SCUTTLE multidisciplinary ecosystem.  For several years we hosted all of the documentation for SCUTTLE Robotics on our website, scuttlerobot.org. But, since mid 2024 we found new ways to make the documentation more flexible &amp; easily updated.  This repository will feature items such as wiring diagrams so that customers can view while contributors can edit.  Also, students can download source files for our diagrams and use them to kickstart documentation for their project.  This repo will expand until we have a solid, fully open, set of docs for the standard SCUTTLE robot and we will trim back the website (scuttlerobot.org) to focus on business interactionss such as ordering robots.</p>"},{"location":"#more-projects","title":"More Projects","text":"<p>More open-source designs:</p> Project Link Purpose OpenAir qr.net/openairproject take control of air, pressure, &amp; flow with open elements OpenArm qr.net/openarmproject revolutionize robotic arms, a 10-year goal OpenBox qr.net/openboxproject array of open designs beginning with a steel box OpenGrow qr.net/opengrowproject open designs for hydroponics &amp; aquaponics systems OpenJar qr.net/openjarproject array of designs for standard jars, threads, &amp; seals OpenLab qr.net/openlabproject build a laboratory to design &amp; fabricate anything. openME qr.net/openmeproject a Mechanical Engineering degree, comprehensive &amp; free, in-progress OpenSpin qr.net/openspinproject array of designs based on parametric bearings SCUTTLE_Nigeria qr.net/scuttleafrica university-level robotics lab in Lagos, Nigeria SCUTTLE_tech qr.net/scuttleproject engineering design guide for scuttle robot SCUTTLE_Mini qr.net/scuttlemini miniature mobile robot, 10kg payload, designs"},{"location":"#reference","title":"Reference","text":"<p>A section for terminology, footnotes, and sources cited within the tech guide.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<p>SCUTTLE Resources CAD Models Videos Applications Guide</p>"},{"location":"#glossary","title":"Glossary","text":"Abbreviation or Term Definition LH, RH left-hand, right-hand OTS off-the-shelf DFM design for manufacturing SBC single-board computer"},{"location":"#key-standards","title":"Key Standards","text":"<p>If you learn about these standards, you can benefit in your project. A) you may find affordable off-the-shelf solutions to integrate. B) you may find a cluster of design knowledge to dive deeper in your favorite area as a maker C) you can invent a project that segways into commercialization more smoothly. </p> <p>Learn Why Standards are your best friend</p> <p>A quick list of standards we integrate:</p> <ul> <li>18650 battery cells specifications</li> <li>MQTT protocol for IoT</li> <li>USB-PD, or Power delivery (integration in progress)</li> <li>DIN rail, 35mm, mechanical geometry</li> <li>Aluminum Extrusion, 30-series or 30x30mm.</li> <li>Camera fastener thread, 1/4-20 (integration in progress)</li> <li>Toyota's 5S methods</li> <li>Toyota's Lean Manufacturing practices</li> <li>Toyota's Kaizen practices</li> <li>Toyota's 5-why root cause analysis</li> <li>Wheel bearings, 608 spec, the ABEC scale (used worldwide from skateboards to fidget spinners)</li> <li>Metric System of Units</li> <li>Markdown programming language for documentation (in progress)</li> <li>Embedded Linux Shell scripting</li> <li>Creative Commons Open Source License CC BY-SA 4.0</li> <li>Water &amp; dust intrusion IP rating scale</li> </ul>"},{"location":"#documenting","title":"Documenting","text":""},{"location":"#learn-docs","title":"Learn Docs","text":"<p>Resources for Documenting</p> <ul> <li>Docs, simplified with Docsify-This</li> <li>Emoji - in markdown with Github Emoji Picker \u25ba Use this for markdown compatibility.</li> <li>Markdown Cheat Sheet</li> <li>Diagrams, with draw.io also known as Diagrams.net</li> <li>Altcodes, from AltcodeUnicode \u25ba use these for compatibility with all word processors.</li> </ul> <p>GET LATEST</p> <ul> <li>Draw.io Library version 06.29</li> <li>Draw.io Diagram draft version 06.29</li> </ul>"},{"location":"#our-goals","title":"Our Goals","text":"<ol> <li>Become the first multidisciplinary open project that addresses the 2020-era pain points for the community:<ul> <li>Mechanical designs are locked into specific CAD software. </li> <li>Manufacturing methods span broadly with poor repeatability by open community.</li> <li>Documentation for high-fidelity designs does not address novice experience level.</li> <li>Highly professional projects are scarce.  Designs that are robust enough to be repeated are usually expensive.</li> <li>It is hard to get help.  Well designed components don't have engineering-level customer service.</li> <li>Robot designs are tied to one embedded controller - availability and costs are limiting.</li> <li>Designs do not offer a curriculum to accompany them.</li> <li>Prerequisites for materials, knowledge, components, are not clear from the beginning.</li> <li>As a robot develops, it's software becomes specific to only that robot - unlike open 3D printing software, for example.</li> </ul> </li> <li>Leverage the community for documentation<ul> <li>Build standards to clearly outline documentation needs</li> <li>Offer training resources on how to document</li> <li>Make documentation friendly to each respective discipline &amp; their typical applications</li> <li>Only use methods that have been shown successful by other communities.</li> <li>Keep documents and source files open &amp; free as much as possible, and their tools thereof</li> </ul> </li> </ol>"},{"location":"#diagramming","title":"Diagramming","text":"<p>Okay, hear us out: diagrams may be the most important part of a multidisciplinary design.  Electrical circuits have established standards, hardware designs have them, but the crossover gets messy.  We are implementing new libraries starting in 2023 to help get your projects planned &amp; documented for repeatability &amp; collaboration.</p> <p>Starting with Draw.io, here's some technology magic:</p> Click a library component Drop it in your Diagram Edit Connection Points <p>As we build a library of the most common components, we will release open draw.io libraries so you can grab preconfigured, labeled images with connection points already set.  The images are high quality, lightweight, and easily pulled into other softwares like Visio and Powerpoint.</p>"},{"location":"#benchmarking","title":"Benchmarking","text":"<p>As an open source community, we aim to gather best practices from leading open projects.  The multidisciplinary nature of SCUTTLE means no existing model fits us, but many elements have been resolved by great communities with an ongoing development and outcomes.</p>"},{"location":"#community-stars","title":"Community Stars","text":"<p>The organizations in this table have influenced SCUTTLE organization heavily and we continue seeking out best practices from groups like them</p> Team Site Feature to Aspire to: Team No. Voron 3D Printer Voron Docs well-made multidisciplinary documentation 1 Thingiverse Thingiverse Library attracted millions - easy to sign up, easy to use 2 GrabCAD GrabCAD Library in-browser Visualization - great permalinks - great tagging 3 OpenBuilds openbuilds attracted high-effort contributions - peak modularity 4 Leo Rover Leo Dev Resources Use github for software development 5 Printables Printables Library Helps designers post designs with clear licensing 6 Hackaday Hackaday.io Curating well-engineered designs 7 Hackster.io Hackster Contests Attracts all types of designers with nice contests 8 Leo Rover Leo 3D Models Convenient in-browser viewing of 3D models 9 Viam Viam Discord Refined Discord channel for asking questions 10 Texas Instruments TI Robotics Academy Research-grade tasks taught in Edge AI 11 uStepper Arm Build Guide Build Guide with detailed graphics 12 Moveo Arm BCN3D Moveo Remaining 3D Printable post-commercialization 13 Instructables Instructables Library Access to PDF version of every project writeup 14 Open Dynamic Open Dynamic Robot Initiative Computations for Dynamics at Academic Level 15 Arxive Free Academic Pub - Cornell Free distribution &amp; open access to scholarly articles 16 Wish List from Community Stars <p>Table \u25ba Wish List Elements that would enhance these offerings - based on our experience, community, feedback, needs, and dreams.</p> Team No. Wish 1 Give more clear metrics on performance - why should you build it? 2 Better support for native CAD files 3 Allow users to implement a license with each post, like printables.org 4 Create a segway into robotic control, instead of only CNC control 5 Reduce the custom parts &amp; replace with OTS parts.\u00a0 Make designs more print-friendly 6 Dial back the Printables Branding and help posts link to full projects. 7 Grade submissions by an open standard, help projects recruit team members in some form 8 Offer PDF downloads for instruction - enhance tools for professional level developers.\u00a0 Better classification of disciplines behind posts (mechanical, electronic, software). 9 Become more inviting to community contributions - make a library of addons or changes. 10 Publish goals &amp; core values that speak to community - help broader disciplines outside software answer \"how will Viam enhance open robotics\" in more disciplines.\u00a0 Better express what is needed from community vs in-company. 11 Improve navigation of content - help users (of various backgrounds) find answers \u25ba students, researchers, makers, businesses, academic partners 12 Build a community of some sort.\u00a0 Explain why the robot is open source. 13 Better explanation of where to buy parts 14 Better categorize projects by discipline, by key component, and/or others.\u00a0 Make easier to find relevant projects for users. 15 Publish the source files for the robot components - particularly 3D printed parts. 16 Offer a category for mechanical engineering along with CS, EE, PHYS, etc. <p>Figure: Table of Wishes from Community Stars</p>"},{"location":"#thought-leadership","title":"Thought Leadership","text":"<ul> <li>Linux is the largest open source project in history, and it's founders created TheOpenSourceWay.org to guide other communities.  Their publication called The Open Source Way offers insights to how it all works.</li> <li>The Open Source Hardware Association pushes to engage hardware development teams in open source.  They have regular releases of their State of Open Source Hardware, and this one is from 2021.</li> </ul> <p>Github Repo Website SCUTTLE Africa</p>"},{"location":"apps/","title":"Applications","text":"<p>*This page is intended to serve the same function as the SCUTTLE Applications Guide (in PDF) but to become more dynamic, open, and easily navigable.</p>"},{"location":"apps/#section-1-hardware-focused-applications","title":"Section 1: Hardware-focused Applications","text":"<p>Robotic projects, listed by their application, which focus a project on a mechanical design.</p>"},{"location":"apps/#example-117-pole-mounted-maintenance","title":"Example 1.17 Pole-mounted Maintenance","text":"<p>Discussion of problem:</p> <ul> <li>Tasks that require a broomstick are often tedious, located in narrow spaces, or requiring frequent repetition.  The fact that we have attached an item to a broomstick indicates right away that the human arm is not sufficient to do a job easily. </li> </ul> <p>Discussion of solution:</p> <ul> <li>Achieve painting, cleaning, or other maintenance functions with your SCUTTLE by attaching any off-the-shelf tool that uses the standard ACME (broomstick) thread.</li> </ul> <p>Why it's easy Here's a 3D Model you can print for threads, credit to FredSWUG on GrabCAD.  visit on grabCAD</p> <p></p>"},{"location":"apps/#example-118-ship-painter","title":"Example 1.18 Ship Painter","text":"<p>Discussion of problem:</p> <ul> <li>The most expensive part of a ship is the maintenance, which relies on continuous painting to prevent corrosion</li> <li>Every crew member of a ship is costly, so docking the ships may be required to dock for painting.</li> <li>Discovery of rust &amp; deteriorated paint may be more important than applying paint.</li> <li>It is tedious to search a whole ship for rust so currently there is no affordable solution.</li> <li>Remote communication is unreliable on the sea, so remote expertise cannot help very much with identifying rust, etc.</li> </ul> <p>Discussion of solution:</p> <ul> <li>A robot painter could make continuous scanning for rust, 24 hours per day, reducing docking time for the ship.</li> <li>The robot painter can utilize edge AI to take photos and evaluate paint</li> <li>While automation is still expensive, only high-cost problems are feasible and this is a high-cost problem.</li> <li>Solar energy is highly available, making continuous recharge of the robot feasible</li> </ul>"},{"location":"archive/","title":"Archive","text":"<p>This page is an archive of \"guides\" and \"miniguides\" from the scuttle organization.  They are created in pptx format and published as PDF files.</p> <p>As of 2025, we are moving towards rebuilding the content so that all elements are accessible at the source level.</p>"},{"location":"archive/#guides","title":"Guides","text":"<ul> <li>3D Printing guide</li> <li>Best practices for printing with our selected equipment, ABS filaments, samples of our printing settings, and common issues with resolutions.</li> <li>Battery guide</li> <li>Indicates the changes in battery design from version 1 to version 3, details about wiring the battery module, the battery management system (BMS) circuit, and shows assembly steps for the battery with graphics and renderings.</li> <li>Bill of Materials</li> <li>A past-published bill of materials, for standard components of the SCUTTLE robot.  Includes a list of 3d printed parts with filenames and descriptions. </li> <li>Brochure Version 3.0</li> <li>Description of key upgrades from version 2 to version 3 of the SCUTTLE robot design.  Includes renderings of the 3D models, describes issues from version 2.0 that were resolved, and higlights changes in individual parts and subassemblies.  This guide can indicate for a user of SCUTTLE version 2.0 which parts are still compatible with the version 3.0 chassis, wheels, encoders, and electronics brackets.   </li> <li>Community guide</li> <li>breaks down the elements (electrical, mechanical, software, firmware) accessible to the open community and how the elements fit together for the robot design.  Information on where we publish digital assets like CAD models, software version, etc.  High-level information about the vision for the community, and the relationships between private enterprises, student learners, universities, and professional engineers who are weekend hackers. </li> <li>Contributor guide</li> <li>Precise steps and thinking processes for engineers who wish to contribute improvements to the community.  Includes (some, but not all) best-practices for publishing CAD models, shopping for desirable off-the-shelf (OTS) parts, and selecting actuators or sensors for design of new modules, to best fit together with our body of publications.</li> <li>Designer Guide</li> <li>Has some redundancy with the Contributor guide.  This PDF needs cleanup and topics should be more clearly segmented between design, contribution, communicating in the community, and upgrading designs of other designers.</li> <li>IoT Guide</li> <li>Shows our recommended background information for learning IoT (internet of things).  Offers an early dated architecture for naming topics in MQTT, for fleets of scuttle robots and other connected edge-devices to interact autonomously.  Suggested parameters on the robots to publish as a template set of diagnostics information or status for maintenance, charging, and robot activity.</li> <li>Kinematics Guide</li> <li>Background knowledge for the mathematics involved in computing the robot positions and movements.  Offers variable names for standard functions like wheel odometry, PID speed control, and computation of curves and displacements in the navigation of the robots.  Uses established mathematics and cites sources for the study &amp; development of robotic navigation.  Indicates parameters and variables that map to the physical robot geometry such as wheelbase, wheel diameter, heading, etc. </li> <li>Project Example</li> <li>Built for students who take the \"mobile robotics\" course at Texas A&amp;M.  The semester project gives 6 weeks for a team of four students to build a new robot function, following 10 weeks of instructional labs.  This example project demonstrates an appropriate scope of work, and a template to subdivide a robotic task into smaller modules.  It covers how to convert a human task into smaller, definitive steps for a robot.  Use this example to design your own robotic project and to create a meaningful project report.  The slides are also an example for the length of presentation, detail level of graphics, and format for clearly communicated engineering steps. </li> <li>Rendering Guide</li> <li>Using Solidworks to produce clean images of your 3D models.  This guide shows how to apply our preferred color scheme, to make images that show the details of a part, and to make clear documentation for viewers to understand your 3D models.  It includes the settings and functions in Solidworks Photoview 360 to make repeatable renderings, and our suggested types of images for producing lightweight documentation for online. </li> <li>Repo Guide</li> <li>A breakdown of several useful repositories of SCUTTLE software, and what purpose they serve.  Shows how to find some key information and where you may go to make contributions or updates.  Gives examples of the names of various content types for consistency or successful retrieval of the information you need.</li> <li>Software Discovery Guide</li> <li>A list of functions that have been built on the SCUTTLE robot using different embedded computers, various IDE's, and softwares installed on your embedded Linux machine.  Shows which capabilities have already been well established and which ones have only seen initial exploration.  These slides were shared with Texas Instruments and with Viam for their developers to choose which robotic functions to design that are supported by the TI Edge AI development board, with purpose-built AI chip.</li> <li>Tools Guide</li> <li>The most common tools necessary in a basic laboratory space for building robotics with SCUTTLE.  Our preferred selections of the hand-tools for crimping and soldering, etc.  Brands and models for some specific tools that are widely available, affordable, and long-standing sales such that they are recommended for setting up new labs.</li> <li>Applications Guide</li> <li>Brainstorming for projects &amp; applications for SCUTTLE robot and developers.  Assists in considering feasibility of projects, integrates consideration of common and available sensors, robust software functions, and available resources for learners.  This is a list of project ideas or application ideas broken down by software projects, sensors projects, and actuators projects. </li> <li>Assembly Guide</li> <li>Tutorial of all details for assembly of a standard SCUTTLE robot, including parts subassemblies, sequence of proper construction, and details to give attention to while building your machine. </li> <li>Software Guide</li> <li>A map of the software modules for the standard SCUTTLE included in the university curriculum at Texas A&amp;M.  Information on how to run and test each software that independently tests each sensor.  Good resource for studying the robot by parts when you are troubleshooting your software, or you want to build new functions on top of multiple fundamental functions.</li> <li>Wiring Guide</li> <li>Detailed tutorial for hookup of the wires for all signals and all power cables for the robot.  Notes about selection of colors, mapping of pins from the CPU to the sensors, and proper grounding between each electronic device on the robot.</li> <li>Wiring_Addons - TO BE POSTED</li> <li>Several examples of sensors and actuators that have been integrated on SCUTTLE and verified.  These OTS sensors and actuators are highly common among electronics projects globally, so we have integrated many familiar devices on SCUTTLE so you can copy our design plans.  Selecting connections that match our wiring addons guide will enhance your alignment with our other tutorials and instructions online.</li> </ul>"},{"location":"brand/","title":"Brand","text":""},{"location":"brand/#logos","title":"Logos","text":"<p>Download these logos as needed to refer to scuttle robotics in your documents or slides.  It is OK to use our brand when you are referring to SCUTTLE Robotics organiztion but it is not ok to impersonate our organization or pretend that your publication was authored by us.  Pretty simple!</p>"},{"location":"brand/#preferred-logo","title":"Preferred Logo","text":"<p>Preferred means it's the most commonly used as of right now (they get adjusted sometimes, mainly by filetype, background, pixel count) and right now this one is the most usable.  JPG is in general the smallest file type for a simple colored logo, whereas some of the png files have a clear background and are best for powerpoints with colored backgrounds.</p> <p></p>"},{"location":"brand/#logo-packet","title":"Logo Packet","text":"<p>Download this zip file to grab the set of logos with various backgrounds and sizes, including ico filetype for icons.  However, we mostly use .png filetype even for icons since 2024, because it became more accepted by docsify-this, wordpress, etc.</p> <ul> <li>Download Brand Packet, 2MB zip</li> </ul> <p></p>"},{"location":"brand/#copyright","title":"Copyright","text":"<p>Brief explanation of copyright to follow.  All copyrighted content is managed in a way that is reasonable, fair, and (I think) helpful for students or creators who want to use our content.  You won't have any trouble unless you are causing trouble.</p>"},{"location":"computing/","title":"Computing Guide","text":"<p>This section covers the various computer options for your SCUTTLE CPU.  It starts with differences in wiring for various SBCs (single board computers).  </p> Pi BeagleY-AI TI Intel Pi 4 Datasheet Y-AI Datasheet TDA4VM Datasheet SBC Datasheet Pi 4 Home Y-AI Home TDA4VM SK Product Page CAPA55R Product Page Y-AI on SCUTTLE"},{"location":"computing/#pi-4","title":"Pi 4","text":"<p>Raspberry Pi 4B with Broadcom ARM processor</p> <p>DOWNLOAD editable design</p> <p>Overview of wiring SCUTTLE with Pi: </p> <p>Figure: Pi wiring overview</p>"},{"location":"computing/#beagle","title":"Beagle","text":"<p>BeagleY-AI, released 2024 March</p> <p>EDIT the design</p> <ul> <li>Official documentation docs.beagle.cc</li> <li>Pinout diagram here: pinout.beagley.ai</li> <li>Expert user review: docs.beagle.cc</li> </ul> <p> Figure: Beagleboard Pinout diagram</p>"},{"location":"computing/#ti-edge-ai","title":"TI Edge AI","text":"<p>Texas Instruments \"Edge AI\" sbc with TDA4VM ARM processor</p> <p>DOWNLOAD editable design</p> <p>Overview of wiring SCUTTLE with TDA4VM: Figure: Edge AI wiring overview</p> Edge AI Pinout Function PIN Function Power_3.3 1 2 Power_5.0 I2C_SDA 3 4 Power I2C_SCL 5 6 GND GPIO 7 8 UART_TXD GND 9 10 UART_RXD GPIO 11 12 I2S_SCLK GPIO 13 14 GND GPIO 15 16 GPIO Power_3.3 17 18 GPIO SPI_MOSI 19 20 GND SPI_MISO 21 22 GPIO SPI_SCLK 23 24 SPI_CS0 GND 25 26 SPI_CS1 ID_SDA 27 28 ID_SCL GPIO 29 30 GND GPIO 31 32 PWM0 PWM1 33 34 GND I2S_FS 35 36 GPIO GPIO 37 38 I2S_DIN GND 39 40 I2S_DOUT"},{"location":"computing/#intel-capa55r","title":"Intel CAPA55R","text":"<p>Axiomtek CAPA55R single-board industrial computer with Intel i7 X86 processor</p> <p>DOWNLOAD editable design</p> <p>Overview of wiring SCUTTLE with Intel-based CAPA55R: Figure: Intel wiring overview</p> <p>Axiomtek's CAPA55R Intel-based computer for industrial robotics: Figure: Axiomtek / Intel CAPA55R SBC</p>"},{"location":"parts/","title":"Parts for the SCUTTLE Robot","text":""},{"location":"parts/#ots","title":"OTS","text":"<p>Off-the-shelf parts make up the key technologies onboard the robot.  They're made from world-class technology companies and highly refined manufacturers.</p>"},{"location":"parts/#prints","title":"Prints","text":"<p>Printed parts are the custom designs that hold your robot together.  In the SCUTTLE design, there are about 15 standard prints and hundreds of community-made addons.</p>"},{"location":"parts/#3d-printing","title":"3D Printing","text":"<p>Standard SCUTTLE v3.0 requires about 330g of 3D printed parts.  Everything is designed for manufacturing in FFF with no supports.</p> <p> Figure: All 3D Printed Parts for a SCUTTLE kit</p> 3D Model - Wheel Assembly    See our 3D model for the wheel assembly    _We've uploaded the model to sketchfab to embed this viewer - let us know if this is helpful!_"},{"location":"power/","title":"Power Budget","text":"<p>A dedicated section for budgeting power. This contains details the power system onboard SCUTTLE.  With extensibility as a central goal for SCUTTLE, we aim to offer sufficient detail to let you engineer any new function or actuator you can dream of.</p> <p>This chart indicates the power loads of each component on your power supply.</p> <p></p> <p>This table describes the estimated duty cycles for key components in a typical operating scenario.</p> <p></p> <p>The raspberry pi and any loads that source power from it, ultimately source power from the 5v DC adapter.  This adapter has an efficiency curve as shown.  Note that the adapter has a constant power draw when the 12v source (battery) is powered on and hooked up.</p> <p></p>"},{"location":"power/#din-power","title":"DIN Power","text":"<p>Quick guide steps to route power with DIN rail.</p> <ol> <li>Use a simple DIN bracket to secure a terminal.  Drill out the center hole to 4mm.</li> <li>Use an M2.5x12mm screw and M2.5 heat-set insert.</li> <li>If you have a deburring tool, deburr your hole for a cleaner insertion.</li> <li>Insert the thead to a flush position.</li> <li>use a zip tie to secure the cable.</li> <li>We recommend the terminal pair for the power source is secured and the load pair is free.</li> <li>secure your source wires into the power distribution terminals and the DIN bracket onto your rail. Now your power source is ready for quick plugging!</li> </ol>"},{"location":"power/#images","title":"Images","text":"<p>Images for general power distribution components &amp; examples.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"tools/","title":"Tools","text":"<p>Tools for SCUTTLE Robot learning &amp; development</p>"},{"location":"tools/#openlab","title":"OpenLab","text":"<p>2025 March update:  The tools for a basic SCUTTLE build, a robot lab, and a mechatronics workshop are all equivalent.  Please visit OpenLab webpage for lots of recommended tools for robotics work. </p> <p>Go to OpenLab Project </p>"},{"location":"tools/#manuals","title":"Manuals","text":"<p>The info below will be relocated to OpenLab, along with lots more.</p> <p>You can learn a great deal from reading these manuals - not only how to use a tool, but better techniques, compatible materials, safety wisdom, and available mods that you didn't know existed.</p> <p>We customize many of our manuals (modified pdfs) for the following goals: * reduced file size * improved readability &amp; accessibility * add notes as needed * make manuals easier to distribute online * digitize manuals that were previously paper-only</p> <p>This is a placeholder to begin posting tools manuals. * Ridgid Vacuum - 18v - WD03180</p>"},{"location":"wiring/","title":"Wiring Guide","text":"<p>All about the wiring of electronics for your robot. This page is divided into signal wires &amp; power wires.</p> <p>Wiring may depend on the compute board you select. The following boards have variations in their wiring:</p> <ul> <li>Raspberry Pi 3/4/5</li> <li>TI SK-TDA4VM</li> <li>BeagleY-AI</li> <li>Axiomtek Intel-based CAPA55R</li> </ul>"},{"location":"wiring/#signals","title":"Signals","text":"<p>Signal wires perform the communication on your robot, between sensors, CPU, and actuators.  Several wires make up a cable, and the cables get plugged in when you build your robot. All signals on SCUTTLE can be made with regular off-the-shelf Dupont-style terminals, all female.  Lengths are 10cm and 20cm as shown.</p> <p>Note</p> <p>Do not peel the wires apart. Keep them bonded for strong and organized connections.</p> <p></p> <p>Colors Selection</p> <p>We chose the colors to make good use of any pack of wires.  When you add sensors and actuators, try to stay consistent.</p> Function Preferred Color Ground Black, Brown, Green Power, 3.3v Red, Purple PWM signals Orange, Yellow CLOCK (I2C) Gray SIGNAL (I2C) White"},{"location":"wiring/#cables","title":"Cables","text":"<p>This section covers cables you can DIY.</p> Cable Diagrams <p>To build signal cables, use these diagrams.</p> <p></p> <p>Figure: cables for left encoder</p> <p></p> <p>Figure: cables for right encoder</p> <p></p> <p>grab the diagram</p> <p>Figure: cables for motor</p> <p></p> <p>Figure: cables for i2c</p>"},{"location":"wiring/#power","title":"Power","text":""},{"location":"wiring/#power-routing","title":"Power Routing","text":"<p>The overview for power cables on SCUTTLE v3</p> <p></p> <p>Figure: power overview</p> <p>Here are the cables to power the motors from the motor driver.</p> <p></p> <p>Figure: motor leads</p>"},{"location":"wiring/#actuator-motor-driver","title":"Actuator: Motor Driver","text":"<p>The cables to power the motor driver from 12v.</p> <p></p> <p>Figure: motor driver wiring</p> <p>The connections from SBC to the motor driver may depend on which compute board you're using:</p> <ul> <li>Raspberry Pi 3/4/5</li> <li>BeagleY-AI</li> </ul>"},{"location":"wiring/#source-battery","title":"Source: Battery","text":"<p>Figure: battery components</p>"},{"location":"wiring/#addons","title":"Addons","text":"<p>This section to include popular addons such as RPLIDAR, ultrasonic sensor, and more. It will contain circuitry-related information for planning power and signals to your actuators.</p>"},{"location":"boards/beagley-ai/getting-started/","title":"Getting Started","text":"<p>You'll need:</p> <ul> <li>BeagleY-AI board</li> <li>microSD card (32GB+)</li> <li>USB-C power supply<ul> <li>Minimum: Rated for 15W (5V 3A)</li> <li>Recommended: Official Raspberry Pi power supply or other USB PD-capable power supply</li> </ul> </li> <li>Ethernet cable</li> <li>Active cooler is highly recommended<ul> <li>Minimum: Adhesive heat sink and small 5V fan</li> <li>Recommended: Official Raspberry Pi active cooler</li> </ul> </li> <li>Computer with Ethernet port and SD card reader<ul> <li>Devices without built-in Ethernet ports or SD card slots may use USB dongles</li> </ul> </li> </ul>"},{"location":"boards/beagley-ai/getting-started/#electrical-setup","title":"Electrical setup","text":""},{"location":"boards/beagley-ai/getting-started/#1-motors-to-motor-driver","title":"1. Motors to Motor Driver","text":"<p>See Wiring \u00a7 Motor Driver for how to wire the motors to the motor driver.</p>"},{"location":"boards/beagley-ai/getting-started/#2-motor-driver-to-beagle","title":"2. Motor Driver to Beagle","text":"<p>See BeagleY-AI \u00a7 Motors for how to wire the motor driver to the Beagle.</p>"},{"location":"boards/beagley-ai/getting-started/#3-encoders-to-beagle","title":"3. Encoders to Beagle","text":"<p>Encoders are used to determine the rotational position of each wheel. They are connected to the Beagle using the I2C protocol. The SCUTTLE design uses a simple I2C bus board to combine the I2C connections for both encoders into a single set of wires.</p> <p>See Wiring \u00a7 Cables for how to create the wires connecting the bus board and the encoders.</p> <p>See BeagleY-AI Wiring \u00a7 Encoders for how to wire the bus board to the Beagle.</p>"},{"location":"boards/beagley-ai/getting-started/#hardware-setup","title":"Hardware setup","text":""},{"location":"boards/beagley-ai/getting-started/#1-cooling","title":"1. Cooling","text":"<p>The BeagleY-AI tends to run quite hot, so some kind of additional cooling is recommended.</p>"},{"location":"boards/beagley-ai/getting-started/#generic-heat-sink-and-fan","title":"Generic heat sink and fan","text":"<p>If you have a generic fan that is rated for 5V or more, connect the power wire to pins 2 or 4 on the BeagleY and the ground wire to pin 6. Refer to the pinout diagram.</p> <p>Stick the heat sink onto the main processor, the large silver chip closest to the USB ports.  Ensure the fan is oriented such that air is being blown through the fins of the heat sink.</p> <p>The fan can be mounted in various ways, including this joint for mounting on a DIN rail.</p> <p></p>"},{"location":"boards/beagley-ai/getting-started/#raspberry-pi-active-cooler","title":"Raspberry Pi Active Cooler","text":"<p>You could also connect the fan using the 4-pin JST cable to the board's PWM fan connector located right below the GPIO pins. Connector's pinout is identical to the Rasperry Pi 5 one.</p> <p>Top-side view (USB and Ethernet connectors on the bottom) Pins from left to right:</p> <p></p> <p>This option would provide active cooling that the board can control. For example, the OS can decide to spin the fans slower to make the device quieter when it is already running cool.</p> <p>More info about active cooling on Beagle Docs.</p>"},{"location":"boards/beagley-ai/getting-started/#2-installing-an-os","title":"2. Installing an OS","text":"<p>The BeagleY-AI is designed to run Debian Linux, an open-source operating system common among embedded systems and servers.</p> <p>Follow the official Quick Start guide for <code>bb-imager</code> to install an appropriate OS (1) on the SD card.</p> <ol> <li>What's the difference between these OS images?</li> </ol>"},{"location":"boards/beagley-ai/getting-started/#3-network-setup","title":"3. Network setup","text":"<p>Ultimately you'll want the BeagleY-AI to be connected to the internet via Wi-Fi. Depending on how you configured Wi-Fi when you flashed the SD card, it may not know how to connect to your Wi-Fi network out-of-the-box.</p> <p>Follow the steps below if you are unable to connect to the Beagle from your computer using <code>ssh debian@beaglebone.local</code>.</p> <ol> <li>Establish a wired connection: Plug one end of an Ethernet cable into your computer and the other end into the Beagle.</li> <li>Power on the board: Plug your BeagleY-AI into a suitable USB-C power adapter.</li> <li>Connect to the board: In a terminal on your computer, run <code>ssh debian@beaglebone.local</code>. If this succeeds, you will now be running commands on the Beagle.</li> <li>Connect to Wi-Fi: Run <code>sudo systemctl start NetworkManager</code> and connect to your Wi-Fi network via NetworkManager TUI:<ol> <li>Enable the Wi-Fi interface by running <code>sudo ifconfig wlan0 up</code>.</li> <li>Run <code>sudo nmtui</code> and select Activate a connection. </li> <li>Select desired network connect to. </li> <li>On the right, click Activate.</li> <li>If necessary, type the network password in the pop-up window. </li> </ol> </li> </ol> <p>Note</p> <p>If you are SSH'ed into the Beagle over Ethernet, the connection may drop out after a few minutes. A common workaround is to SSH into the board and run <code>sudo nmcli c m \"Wired connection 1\" ipv4.method link-local</code>.</p>"},{"location":"boards/beagley-ai/getting-started/#software-setup","title":"Software setup","text":""},{"location":"boards/beagley-ai/getting-started/#1-pre-requisites","title":"1. Pre-requisites","text":"<p>After successfully connecting to internet, run <code>sudo apt update</code>. </p> <ul> <li>Your system just grabs the newest lists of available software from all its repositories and stores them in <code>/var/lib/apt/lists/</code>. </li> <li>It simply makes sure that whenever you do an install or upgrade next, you\u2019re working with the most recent info.</li> </ul> <p>Warning</p> <p>You could also <code>sudo apt upgrade</code> but be careful as on some boards (e.g. BeagleBone Black with the Debian image), running <code>apt upgrade</code> can actually pull in an older kernel or overwrite vendor\u2010customized device trees, breaking hardware support. For example, users have reported their 5.10 kernel being downgraded back to 4.19 after an unguarded <code>apt upgrade</code>. More info</p> <p>Upgrading between major OS releases (e.g. Raspberry Pi OS Bullseye \u2192 Bookworm) via <code>apt full-upgrade</code> is not recommended; a clean flash of the new release image is the supported path to avoid partial\u2010upgrade failures. See Upgrade rather than reinstall or Upgrade from 'Buster' to Raspberry Pi OS.</p>"},{"location":"boards/beagley-ai/getting-started/#2-enabling-pwm","title":"2. Enabling PWM","text":"<p>The BeagleY-AI has hardware PWM, but to use it you'll need to import the appropriate overlays on boot.</p> <ol> <li>Open <code>/boot/firmware/extlinux/extlinux.conf</code> in a text editor. For example, <code>sudo nano /boot/firmware/extlinux/extlinux.conf</code>.</li> <li>Locate the \"microSD (default)\" section at the end of the file.</li> <li> <p>Replace the commented <code>fdtoverlays</code> line with the following:</p> <pre><code>fdtoverlays /overlays/k3-am67a-beagley-ai-pwm-epwm0-gpio12.dtbo /overlays/k3-am67a-beagley-ai-pwm-epwm1-gpio13.dtbo /overlays/k3-am67a-beagley-ai-pwm-epwm0-gpio5.dtbo /overlays/k3-am67a-beagley-ai-pwm-epwm1-gpio6.dtbo\n</code></pre> </li> <li> <p>The full section should look like this: <pre><code>label microSD (default)\n    kernel /Image\n    append console=ttyS2,115200n8 root=/dev/mmcblk1p2 ro rootfstype=ext4 rootwait net.ifnames=0 quiet\n    fdtdir /\n    fdt /ti/k3-am67a-beagley-ai.dtb\n    fdtoverlays /overlays/k3-am67a-beagley-ai-pwm-epwm0-gpio5-gpio12.dtbo /overlays/k3-am67a-beagley-ai-pwm-epwm1-gpio6-gpio13.dtbo\n    #initrd /initrd.img\n</code></pre></p> </li> <li>Save the file. For Nano, hit Ctrl+X and then Enter.</li> </ol>"},{"location":"boards/beagley-ai/getting-started/#3-downloading-code","title":"3. Downloading code","text":"<p>To install the repo type: <pre><code>git clone https://github.com/yoshiask/SCUTTLE-BeagleY-AI-Demo\n</code></pre> Navigate to the directory: <pre><code>cd SCUTTLE-BeagleY-AI-Demo\n</code></pre></p>"},{"location":"boards/beagley-ai/getting-started/#4-installing-python","title":"4. Installing Python","text":"<p>The <code>pip</code> command available from the BeagleY-AI's core environment is locked, so you'll need to use a Python virtual environment.</p> <ul> <li>To create a new virtual enviornment: <code>python3 -m venv ./venv</code></li> <li>To activate an environment: <code>source venv/bin/activate</code></li> <li>To deactivate an environment: <code>deactivate</code></li> </ul> <p>Note</p> <p>You'll have to activate the virtual environment in every terminal you wish to run or manage your Python project from.</p> <p>Within the virtual environment, install the required libraries: <pre><code>pip install -r requirements.txt\n</code></pre></p>"},{"location":"boards/beagley-ai/getting-started/#5-running-the-demo","title":"5. Running the demo","text":"<p>With the robot on the ground, run <code>L3_gpDemo.py</code> to drive the SCUTTLE with a wired gamepad: <pre><code>python L3_gpDemo.py\n</code></pre></p>"},{"location":"boards/beagley-ai/getting-started/#appendix","title":"Appendix","text":""},{"location":"boards/beagley-ai/getting-started/#whats-the-difference-between-these-os-images","title":"What's the difference between these OS images?","text":"<p>There are three pieces of information to note for each image: the Debian version, the environment, and the Linux kernel version. For example, \"BeagleY-AI Debian 12.11 2025-05-21 XFCE (v6.6.x-ti)\" is Debian 12.11, with the XFCE desktop environment, and Linux kernel 6.6.</p> <ul> <li>XFCE is a desktop environment, meaning you will have an interface similar to Windows or MacOS. Note that you'll need a micro HDMI cable and an external monitor to make use of it.</li> <li>The minimal environment contains only a text-based command line. If you intend on running the board headless (meaning, without a dedicated display), this is the recommended configuration.</li> </ul>"},{"location":"boards/beagley-ai/getting-started/#whats-a-kernel","title":"What's a kernel?","text":"<p>In a few words, an operating system kernel is a piece of low-level software whose primary job is to schedule tasks on the CPU.</p> <p>In more words: The main processor of a computer can really only do one thing at a time. Early operating systems such as DOS didn't have a kernel, and as such code had to be executed in sequence. However, as computers got more powerful, it made sense to want to multitask on them. To accomplish this, kernels were created to manage all tasks running on the system. The kernel is then responsible for deciding when to let a task run and when to give control of execution to another task.</p> <p>Modern kernels like the Linux kernel and Windows NT also include a hardware abstraction layer (HAL) which allows software to talk to hardware without knowing exactly how the hardware works or who makes it.</p>"},{"location":"boards/beagley-ai/wiring-guide/","title":"Wiring Guide","text":"<p>A guide for all wiring specific to the Beagle Y-AI. All other wiring can be found in the generic Wiring Guide.</p>"},{"location":"boards/beagley-ai/wiring-guide/#overview","title":"Overview","text":""},{"location":"boards/beagley-ai/wiring-guide/#motors","title":"Motors","text":""},{"location":"boards/beagley-ai/wiring-guide/#encoders","title":"Encoders","text":""},{"location":"boards/capa55r/wiring-guide/","title":"Wiring Guide","text":""},{"location":"boards/capa55r/wiring-guide/#overview","title":"Overview","text":""},{"location":"boards/raspberry-pi/wiring-guide/","title":"Wiring Guide","text":"<p>A guide for all wiring specific to Raspberry Pis. All other wiring can be found in the generic Wiring Guide.</p>"},{"location":"boards/raspberry-pi/wiring-guide/#overview","title":"Overview","text":""},{"location":"boards/raspberry-pi/wiring-guide/#motors","title":"Motors","text":""},{"location":"boards/tda4vm/wiring-guide/","title":"Wiring Guide","text":"<p>A guide for all wiring specific to the TI SK-TDA4VM. All other wiring can be found in the generic Wiring Guide.</p>"},{"location":"boards/tda4vm/wiring-guide/#overview","title":"Overview","text":""}]}